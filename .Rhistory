print(jct.coords.true)
jct.coords.norm <- norm_coords(jct.coords.true, xmin = 0, xmax = 1, ymin = 0, ymax = 1)
print(jct.coords.norm)
# We also need to normalize the data.
junctions.json <- fromJSON(filepath)
head(summary(junctions.json),n=3L)
# Get number of unique connections between nodes
nconn <- sum(adjacency.matrix != 0)
# Names
edges.names <- rownames(adjacency.matrix)
# Initialize variables
edges.id <- rep(NA_character_,nconn)
edges.from <- rep(NA_character_,nconn)
edges.to <- rep(NA_character_,nconn)
edges.weight <- rep(NA_integer_,nconn)
# True coords
edges.coords.true.from <- matrix(data=rep(NA_integer_,2*nconn),nrow=nconn,ncol=2)
colnames(edges.coords.true.from) <- c('x','y')
edges.coords.true.to <- matrix(data=rep(NA_integer_,2*nconn),nrow=nconn,ncol=2)
colnames(edges.coords.true.to) <- c('x','y')
# Normal coords
edges.coords.norm.from <- matrix(data=rep(NA_integer_,2*nconn),nrow=nconn,ncol=2)
colnames(edges.coords.norm.from) <- c('x','y')
edges.coords.norm.to <- matrix(data=rep(NA_integer_,2*nconn),nrow=nconn,ncol=2)
colnames(edges.coords.norm.to) <- c('x','y')
# Populate our varaibles
counter <- 1
for (index.from in 1:nrow(adjacency.matrix)){
for (index.to in 1:ncol(adjacency.matrix)){
if (adjacency.matrix[index.from,index.to] != 0){
# From
edges.from[counter] <- edges.names[index.from]
# to
edges.to[counter] <- edges.names[index.to]
# id
edges.id[counter] <- paste0(edges.from[counter],'_to_',edges.to[counter])
# Weight
edges.weight[counter] <- as.integer(adjacency.matrix[index.from,index.to])
# True Coordinates
edges.coords.true.from[counter,'x'] <- coords.clusters$centers[index.from,'x']
edges.coords.true.from[counter,'y'] <- coords.clusters$centers[index.from,'y']
edges.coords.true.to[counter,'x'] <- coords.clusters$centers[index.to,'x']
edges.coords.true.to[counter,'y'] <- coords.clusters$centers[index.to,'y']
# Normal Coordinates
edges.coords.norm.from[counter,'x'] <- jct.coords.norm[index.from,'x']
edges.coords.norm.from[counter,'y'] <- jct.coords.norm[index.from,'y']
edges.coords.norm.to[counter,'x'] <- jct.coords.norm[index.to,'x']
edges.coords.norm.to[counter,'y'] <- jct.coords.norm[index.to,'y']
# Increment counter
counter <- counter + 1
}
}
}
edges.json <- fromJSON(filepath)
head(summary(edges.json),n=3L)
source(file='../scripts/SUMO.kmeans.simplify.R')
SUMO.kmeans.simplify(
project.name = 'leopard',
jsons.dir = '../jsons/',
output.dir = './output/',
plot.width = 640,
plot.height = 480,
plot.legend.pos = 'bottomleft',
kmeans.k = 15,
kmeans.iter.max = 10,
kmeans.nstart = 1
)
library(statnet)
adjacency.network2 <- network(adjacency.matrix, matrix.type="adjacency", directed=FALSE, cignore.eval=FALSE, names.eval="value")
# We ommited the gplot method fro brevity. This is the code to create the plot but,
# for demonstration we include a PNG with a better resolution instead.
#gplot(adjacency.network2, gmode="digraph", label=adjacency.network2%v%'vertex.names', arrowhead.cex=1)
source(file='../scripts/SUMO.project2plot.R')
# Get a junctions.matrix from the json files for project `leopard`
junctions.matrix <- project.name2jm('leopard')
# Extract the data we want from junction.data at column 'True Coords' (default)
xynames <- jm2xynames(junctions.matrix)
# Summarize our object `xynames`
print(summary(xynames))
# Unlist and give x, y, and names their own vectors.
coords.x <- unlist(xynames[1])
coords.y <- unlist(xynames[2])
coords.names <- unlist(xynames[3])
# Clean up
rm(junctions.matrix,xynames)
coords.matrix <- cbind(coords.x,coords.y)
colnames(coords.matrix) <- c('x','y')
rownames(coords.matrix) <- coords.names
print(head(coords.matrix,n=5L))
ncenters <- 6
coords.clusters <- kmeans(x = coords.matrix, centers = ncenters, iter.max = 50, nstart = 27, algorithm = 'Hartigan-Wong')
plot(x = coords.matrix, col = coords.clusters$cluster)
points(coords.clusters$centers, col = 1:ncenters , pch = 8, cex = 2)
source(file='../scripts/clusterSUMO.project.R')
coords.clusters <- plot.kmeans(project.name2cm('leopard'),k=7,return.cc=T)
print(head(coords.clusters$cluster))
print(coords.clusters$centers)
print(coords.clusters$totss)
print(coords.clusters$withinss)
print(coords.clusters$betweenss)
print(coords.clusters$size)
print(coords.clusters$iter)
print(coords.clusters$ifault)
print(coords.clusters$centers)
k <- nrow(coords.clusters$centers)
plot(coords.clusters$centers,col=1:k)
legend('bottomleft', pch = rep(1,k), legend = 1:k, col = unique(1:k))
jmem <- json2matrices('leopard')
junctions.matrix <- jmem[[1]]
edges.matrix <- jmem[[2]]
rm(jmem) # Clean up temporary object
print(head(junctions.matrix,n=5L))
print(head(edges.matrix,n=5L))
adjacency.matrix <- matrix(data = rep(0,k * k),nrow = k,ncol = k)
rownames(adjacency.matrix) <- paste0('cluster_',1:k)
colnames(adjacency.matrix) <- paste0('cluster_',1:k)
#print(adjacency.matrix) # Ommitted for brevity
for (i in 1:nrow(edges.matrix)){
# From
node.from <- edges.matrix[[i,'from']]
node.from.cluster <- coords.clusters$cluster[node.from]
# To
node.to <- edges.matrix[[i,'to']]
node.to.cluster <- coords.clusters$cluster[node.to]
# Update adjacency table
if (node.to.cluster != node.from.cluster){
adjacency.matrix[node.from.cluster,node.to.cluster] <- adjacency.matrix[node.from.cluster,node.to.cluster] + 1
}
}
print(adjacency.matrix)
adjacency.network <- network(adjacency.matrix, matrix.type="adjacency", directed=FALSE, cignore.eval=FALSE, names.eval="value")
gplot(adjacency.network, gmode="digraph", label=adjacency.network%v%'vertex.names', arrowhead.cex=1)
library('jsonlite')
# Amount of clusters
nn <- length(coords.clusters$size)
# Cluster names
cl.names <- paste0(rep("cluster_", nn), 1:nn)
# Size of each cluster (The amount of junctions in each cluster)
cl.size <- coords.clusters$size
# Names of all of the nodes within each cluster.
cl.max <- max(cl.size)
cl.nodes <- matrix(data = NA_character_, nrow = nn, ncol = cl.max)
# Populate the list of nodes
counter <- rep(1L,nn)
for (i in 1:length(coords.clusters$cluster)){
cl.index <- coords.clusters$cluster[i]
cl.nodes[cl.index,counter[cl.index]] <- names(cl.index)
counter[cl.index] <- counter[cl.index] + 1
}
rm(counter)
clusters.json <- fromJSON(filepath)
head(summary(clusters.json),n=3L)
jct.names <- cl.names
print(jct.names)
jct.coords.true <- coords.clusters$centers
print(jct.coords.true)
jct.coords.norm <- norm_coords(jct.coords.true, xmin = 0, xmax = 1, ymin = 0, ymax = 1)
print(jct.coords.norm)
# We also need to normalize the data.
junctions.json <- fromJSON(filepath)
head(summary(junctions.json),n=3L)
# Get number of unique connections between nodes
nconn <- sum(adjacency.matrix != 0)
# Names
edges.names <- rownames(adjacency.matrix)
# Initialize variables
edges.id <- rep(NA_character_,nconn)
edges.from <- rep(NA_character_,nconn)
edges.to <- rep(NA_character_,nconn)
edges.weight <- rep(NA_integer_,nconn)
# True coords
edges.coords.true.from <- matrix(data=rep(NA_integer_,2*nconn),nrow=nconn,ncol=2)
colnames(edges.coords.true.from) <- c('x','y')
edges.coords.true.to <- matrix(data=rep(NA_integer_,2*nconn),nrow=nconn,ncol=2)
colnames(edges.coords.true.to) <- c('x','y')
# Normal coords
edges.coords.norm.from <- matrix(data=rep(NA_integer_,2*nconn),nrow=nconn,ncol=2)
colnames(edges.coords.norm.from) <- c('x','y')
edges.coords.norm.to <- matrix(data=rep(NA_integer_,2*nconn),nrow=nconn,ncol=2)
colnames(edges.coords.norm.to) <- c('x','y')
# Populate our varaibles
counter <- 1
for (index.from in 1:nrow(adjacency.matrix)){
for (index.to in 1:ncol(adjacency.matrix)){
if (adjacency.matrix[index.from,index.to] != 0){
# From
edges.from[counter] <- edges.names[index.from]
# to
edges.to[counter] <- edges.names[index.to]
# id
edges.id[counter] <- paste0(edges.from[counter],'_to_',edges.to[counter])
# Weight
edges.weight[counter] <- as.integer(adjacency.matrix[index.from,index.to])
# True Coordinates
edges.coords.true.from[counter,'x'] <- coords.clusters$centers[index.from,'x']
edges.coords.true.from[counter,'y'] <- coords.clusters$centers[index.from,'y']
edges.coords.true.to[counter,'x'] <- coords.clusters$centers[index.to,'x']
edges.coords.true.to[counter,'y'] <- coords.clusters$centers[index.to,'y']
# Normal Coordinates
edges.coords.norm.from[counter,'x'] <- jct.coords.norm[index.from,'x']
edges.coords.norm.from[counter,'y'] <- jct.coords.norm[index.from,'y']
edges.coords.norm.to[counter,'x'] <- jct.coords.norm[index.to,'x']
edges.coords.norm.to[counter,'y'] <- jct.coords.norm[index.to,'y']
# Increment counter
counter <- counter + 1
}
}
}
edges.json <- fromJSON(filepath)
head(summary(edges.json),n=3L)
source(file='../scripts/SUMO.kmeans.simplify.R')
SUMO.kmeans.simplify(project.name = 'leopard', jsons.dir = '../jsons/', output.dir = './output/', plot.width = 640, plot.height = 480, plot.legend.pos = 'bottomleft', kmeans.k = 15, kmeans.iter.max = 10, kmeans.nstart = 1)
library(statnet)
adjacency.network2 <- network(adjacency.matrix, matrix.type="adjacency", directed=FALSE, cignore.eval=FALSE, names.eval="value")
# We ommited the gplot method fro brevity. This is the code to create the plot but,
# for demonstration we include a PNG with a better resolution instead.
#gplot(adjacency.network2, gmode="digraph", label=adjacency.network2%v%'vertex.names', arrowhead.cex=1)
source(file='../scripts/SUMO.project2plot.R')
# Get a junctions.matrix from the json files for project `leopard`
junctions.matrix <- project.name2jm('leopard')
# Extract the data we want from junction.data at column 'True Coords' (default)
xynames <- jm2xynames(junctions.matrix)
# Summarize our object `xynames`
print(summary(xynames))
# Unlist and give x, y, and names their own vectors.
coords.x <- unlist(xynames[1])
coords.y <- unlist(xynames[2])
coords.names <- unlist(xynames[3])
# Clean up
rm(junctions.matrix,xynames)
coords.matrix <- cbind(coords.x,coords.y)
colnames(coords.matrix) <- c('x','y')
rownames(coords.matrix) <- coords.names
print(head(coords.matrix,n=5L))
ncenters <- 6
coords.clusters <- kmeans(x = coords.matrix, centers = ncenters, iter.max = 50, nstart = 27, algorithm = 'Hartigan-Wong')
plot(x = coords.matrix, col = coords.clusters$cluster)
points(coords.clusters$centers, col = 1:ncenters , pch = 8, cex = 2)
source(file='../scripts/clusterSUMO.project.R')
coords.clusters <- plot.kmeans(project.name2cm('leopard'),k=7,return.cc=T)
print(head(coords.clusters$cluster))
print(coords.clusters$centers)
print(coords.clusters$totss)
print(coords.clusters$withinss)
print(coords.clusters$betweenss)
print(coords.clusters$size)
print(coords.clusters$iter)
print(coords.clusters$ifault)
print(coords.clusters$centers)
k <- nrow(coords.clusters$centers)
plot(coords.clusters$centers,col=1:k)
legend('bottomleft', pch = rep(1,k), legend = 1:k, col = unique(1:k))
jmem <- json2matrices('leopard')
junctions.matrix <- jmem[[1]]
edges.matrix <- jmem[[2]]
rm(jmem) # Clean up temporary object
print(head(junctions.matrix,n=5L))
print(head(edges.matrix,n=5L))
adjacency.matrix <- matrix(data = rep(0,k * k),nrow = k,ncol = k)
rownames(adjacency.matrix) <- paste0('cluster_',1:k)
colnames(adjacency.matrix) <- paste0('cluster_',1:k)
#print(adjacency.matrix) # Ommitted for brevity
for (i in 1:nrow(edges.matrix)){
# From
node.from <- edges.matrix[[i,'from']]
node.from.cluster <- coords.clusters$cluster[node.from]
# To
node.to <- edges.matrix[[i,'to']]
node.to.cluster <- coords.clusters$cluster[node.to]
# Update adjacency table
if (node.to.cluster != node.from.cluster){
adjacency.matrix[node.from.cluster,node.to.cluster] <- adjacency.matrix[node.from.cluster,node.to.cluster] + 1
}
}
print(adjacency.matrix)
adjacency.network <- network(adjacency.matrix, matrix.type="adjacency", directed=FALSE, cignore.eval=FALSE, names.eval="value")
gplot(adjacency.network, gmode="digraph", label=adjacency.network%v%'vertex.names', arrowhead.cex=1)
library('jsonlite')
# Amount of clusters
nn <- length(coords.clusters$size)
# Cluster names
cl.names <- paste0(rep("cluster_", nn), 1:nn)
# Size of each cluster (The amount of junctions in each cluster)
cl.size <- coords.clusters$size
# Names of all of the nodes within each cluster.
cl.max <- max(cl.size)
cl.nodes <- matrix(data = NA_character_, nrow = nn, ncol = cl.max)
# Populate the list of nodes
counter <- rep(1L,nn)
for (i in 1:length(coords.clusters$cluster)){
cl.index <- coords.clusters$cluster[i]
cl.nodes[cl.index,counter[cl.index]] <- names(cl.index)
counter[cl.index] <- counter[cl.index] + 1
}
rm(counter)
clusters.json <- fromJSON(filepath)
head(summary(clusters.json),n=3L)
jct.names <- cl.names
print(jct.names)
jct.coords.true <- coords.clusters$centers
print(jct.coords.true)
jct.coords.norm <- norm_coords(jct.coords.true, xmin = 0, xmax = 1, ymin = 0, ymax = 1)
print(jct.coords.norm)
# We also need to normalize the data.
junctions.json <- fromJSON(filepath)
head(summary(junctions.json),n=3L)
# Get number of unique connections between nodes
nconn <- sum(adjacency.matrix != 0)
# Names
edges.names <- rownames(adjacency.matrix)
# Initialize variables
edges.id <- rep(NA_character_,nconn)
edges.from <- rep(NA_character_,nconn)
edges.to <- rep(NA_character_,nconn)
edges.weight <- rep(NA_integer_,nconn)
# True coords
edges.coords.true.from <- matrix(data=rep(NA_integer_,2*nconn),nrow=nconn,ncol=2)
colnames(edges.coords.true.from) <- c('x','y')
edges.coords.true.to <- matrix(data=rep(NA_integer_,2*nconn),nrow=nconn,ncol=2)
colnames(edges.coords.true.to) <- c('x','y')
# Normal coords
edges.coords.norm.from <- matrix(data=rep(NA_integer_,2*nconn),nrow=nconn,ncol=2)
colnames(edges.coords.norm.from) <- c('x','y')
edges.coords.norm.to <- matrix(data=rep(NA_integer_,2*nconn),nrow=nconn,ncol=2)
colnames(edges.coords.norm.to) <- c('x','y')
# Populate our varaibles
counter <- 1
for (index.from in 1:nrow(adjacency.matrix)){
for (index.to in 1:ncol(adjacency.matrix)){
if (adjacency.matrix[index.from,index.to] != 0){
# From
edges.from[counter] <- edges.names[index.from]
# to
edges.to[counter] <- edges.names[index.to]
# id
edges.id[counter] <- paste0(edges.from[counter],'_to_',edges.to[counter])
# Weight
edges.weight[counter] <- as.integer(adjacency.matrix[index.from,index.to])
# True Coordinates
edges.coords.true.from[counter,'x'] <- coords.clusters$centers[index.from,'x']
edges.coords.true.from[counter,'y'] <- coords.clusters$centers[index.from,'y']
edges.coords.true.to[counter,'x'] <- coords.clusters$centers[index.to,'x']
edges.coords.true.to[counter,'y'] <- coords.clusters$centers[index.to,'y']
# Normal Coordinates
edges.coords.norm.from[counter,'x'] <- jct.coords.norm[index.from,'x']
edges.coords.norm.from[counter,'y'] <- jct.coords.norm[index.from,'y']
edges.coords.norm.to[counter,'x'] <- jct.coords.norm[index.to,'x']
edges.coords.norm.to[counter,'y'] <- jct.coords.norm[index.to,'y']
# Increment counter
counter <- counter + 1
}
}
}
edges.json <- fromJSON(filepath)
head(summary(edges.json),n=3L)
source(file='../scripts/SUMO.kmeans.simplify.R')
SUMO.kmeans.simplify(project.name = 'leopard', jsons.dir = '../jsons/', output.dir = './output/', plot.width = 640, plot.height = 480, plot.legend.pos = 'bottomleft', kmeans.k = 15, kmeans.iter.max = 10, kmeans.nstart = 1)
library(statnet)
adjacency.network2 <- network(adjacency.matrix, matrix.type="adjacency", directed=FALSE, cignore.eval=FALSE, names.eval="value")
# We ommited the gplot method fro brevity. This is the code to create the plot but,
# for demonstration we include a PNG with a better resolution instead.
#gplot(adjacency.network2, gmode="digraph", label=adjacency.network2%v%'vertex.names', arrowhead.cex=1)
source(file='../scripts/SUMO.project2plot.R')
# Get a junctions.matrix from the json files for project `leopard`
junctions.matrix <- project.name2jm('leopard')
# Extract the data we want from junction.data at column 'True Coords' (default)
xynames <- jm2xynames(junctions.matrix)
# Summarize our object `xynames`
print(summary(xynames))
# Unlist and give x, y, and names their own vectors.
coords.x <- unlist(xynames[1])
coords.y <- unlist(xynames[2])
coords.names <- unlist(xynames[3])
# Clean up
rm(junctions.matrix,xynames)
coords.matrix <- cbind(coords.x,coords.y)
colnames(coords.matrix) <- c('x','y')
rownames(coords.matrix) <- coords.names
print(head(coords.matrix,n=5L))
ncenters <- 6
coords.clusters <- kmeans(x = coords.matrix, centers = ncenters, iter.max = 50, nstart = 27, algorithm = 'Hartigan-Wong')
plot(x = coords.matrix, col = coords.clusters$cluster)
points(coords.clusters$centers, col = 1:ncenters , pch = 8, cex = 2)
source(file='../scripts/clusterSUMO.project.R')
coords.clusters <- plot.kmeans(project.name2cm('leopard'),k=7,return.cc=T)
print(head(coords.clusters$cluster))
print(coords.clusters$centers)
print(coords.clusters$totss)
print(coords.clusters$withinss)
print(coords.clusters$betweenss)
print(coords.clusters$size)
print(coords.clusters$iter)
print(coords.clusters$ifault)
print(coords.clusters$centers)
k <- nrow(coords.clusters$centers)
plot(coords.clusters$centers,col=1:k)
legend('bottomleft', pch = rep(1,k), legend = 1:k, col = unique(1:k))
jmem <- json2matrices('leopard')
junctions.matrix <- jmem[[1]]
edges.matrix <- jmem[[2]]
rm(jmem) # Clean up temporary object
print(head(junctions.matrix,n=5L))
print(head(edges.matrix,n=5L))
adjacency.matrix <- matrix(data = rep(0,k * k),nrow = k,ncol = k)
rownames(adjacency.matrix) <- paste0('cluster_',1:k)
colnames(adjacency.matrix) <- paste0('cluster_',1:k)
#print(adjacency.matrix) # Ommitted for brevity
for (i in 1:nrow(edges.matrix)){
# From
node.from <- edges.matrix[[i,'from']]
node.from.cluster <- coords.clusters$cluster[node.from]
# To
node.to <- edges.matrix[[i,'to']]
node.to.cluster <- coords.clusters$cluster[node.to]
# Update adjacency table
if (node.to.cluster != node.from.cluster){
adjacency.matrix[node.from.cluster,node.to.cluster] <- adjacency.matrix[node.from.cluster,node.to.cluster] + 1
}
}
print(adjacency.matrix)
adjacency.network <- network(adjacency.matrix, matrix.type="adjacency", directed=FALSE, cignore.eval=FALSE, names.eval="value")
gplot(adjacency.network, gmode="digraph", label=adjacency.network%v%'vertex.names', arrowhead.cex=1)
library('jsonlite')
# Amount of clusters
nn <- length(coords.clusters$size)
# Cluster names
cl.names <- paste0(rep("cluster_", nn), 1:nn)
# Size of each cluster (The amount of junctions in each cluster)
cl.size <- coords.clusters$size
# Names of all of the nodes within each cluster.
cl.max <- max(cl.size)
cl.nodes <- matrix(data = NA_character_, nrow = nn, ncol = cl.max)
# Populate the list of nodes
counter <- rep(1L,nn)
for (i in 1:length(coords.clusters$cluster)){
cl.index <- coords.clusters$cluster[i]
cl.nodes[cl.index,counter[cl.index]] <- names(cl.index)
counter[cl.index] <- counter[cl.index] + 1
}
rm(counter)
clusters.json <- fromJSON(filepath)
head(summary(clusters.json),n=3L)
jct.names <- cl.names
print(jct.names)
jct.coords.true <- coords.clusters$centers
print(jct.coords.true)
jct.coords.norm <- norm_coords(jct.coords.true, xmin = 0, xmax = 1, ymin = 0, ymax = 1)
print(jct.coords.norm)
# We also need to normalize the data.
junctions.json <- fromJSON(filepath)
head(summary(junctions.json),n=3L)
# Get number of unique connections between nodes
nconn <- sum(adjacency.matrix != 0)
# Names
edges.names <- rownames(adjacency.matrix)
# Initialize variables
edges.id <- rep(NA_character_,nconn)
edges.from <- rep(NA_character_,nconn)
edges.to <- rep(NA_character_,nconn)
edges.weight <- rep(NA_integer_,nconn)
# True coords
edges.coords.true.from <- matrix(data=rep(NA_integer_,2*nconn),nrow=nconn,ncol=2)
colnames(edges.coords.true.from) <- c('x','y')
edges.coords.true.to <- matrix(data=rep(NA_integer_,2*nconn),nrow=nconn,ncol=2)
colnames(edges.coords.true.to) <- c('x','y')
# Normal coords
edges.coords.norm.from <- matrix(data=rep(NA_integer_,2*nconn),nrow=nconn,ncol=2)
colnames(edges.coords.norm.from) <- c('x','y')
edges.coords.norm.to <- matrix(data=rep(NA_integer_,2*nconn),nrow=nconn,ncol=2)
colnames(edges.coords.norm.to) <- c('x','y')
# Populate our varaibles
counter <- 1
for (index.from in 1:nrow(adjacency.matrix)){
for (index.to in 1:ncol(adjacency.matrix)){
if (adjacency.matrix[index.from,index.to] != 0){
# From
edges.from[counter] <- edges.names[index.from]
# to
edges.to[counter] <- edges.names[index.to]
# id
edges.id[counter] <- paste0(edges.from[counter],'_to_',edges.to[counter])
# Weight
edges.weight[counter] <- as.integer(adjacency.matrix[index.from,index.to])
# True Coordinates
edges.coords.true.from[counter,'x'] <- coords.clusters$centers[index.from,'x']
edges.coords.true.from[counter,'y'] <- coords.clusters$centers[index.from,'y']
edges.coords.true.to[counter,'x'] <- coords.clusters$centers[index.to,'x']
edges.coords.true.to[counter,'y'] <- coords.clusters$centers[index.to,'y']
# Normal Coordinates
edges.coords.norm.from[counter,'x'] <- jct.coords.norm[index.from,'x']
edges.coords.norm.from[counter,'y'] <- jct.coords.norm[index.from,'y']
edges.coords.norm.to[counter,'x'] <- jct.coords.norm[index.to,'x']
edges.coords.norm.to[counter,'y'] <- jct.coords.norm[index.to,'y']
# Increment counter
counter <- counter + 1
}
}
}
edges.json <- fromJSON(filepath)
head(summary(edges.json),n=3L)
source(file='../scripts/SUMO.kmeans.simplify.R')
SUMO.kmeans.simplify(
project.name = 'leopard',
jsons.dir = '../jsons/',
output.dir = './output/',
plot.width = 640,
plot.height = 480,
plot.legend.pos = 'bottomleft',
kmeans.k = 15,
kmeans.iter.max = 10,
kmeans.nstart = 1
)
